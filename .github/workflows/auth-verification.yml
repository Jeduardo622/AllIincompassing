name: Authentication System Verification

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'supabase/migrations/**'
      - 'supabase/functions/**'
      - 'src/lib/auth.ts'
      - 'cypress/e2e/auth-**'
      - 'scripts/verify-auth-system.js'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'supabase/migrations/**'
      - 'supabase/functions/**'
      - 'src/lib/auth.ts'
      - 'cypress/e2e/auth-**'
      - 'scripts/verify-auth-system.js'

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

jobs:
  verify-auth-system:
    name: Verify Authentication System
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Link Supabase project
      run: supabase link --project-ref $SUPABASE_PROJECT_ID
      
    - name: Verify database connection
      run: |
        supabase db diff --schema public --linked
        if [ $? -eq 0 ]; then
          echo "✅ Database connection successful"
        else
          echo "❌ Database connection failed"
          exit 1
        fi
        
    - name: Run authentication system verification
      run: node scripts/verify-auth-system.js
      
    - name: Check for schema drift
      run: |
        echo "Checking for unauthorized schema changes..."
        DIFF_OUTPUT=$(supabase db diff --schema public --linked 2>&1)
        if [ -n "$DIFF_OUTPUT" ]; then
          echo "⚠️ Schema drift detected:"
          echo "$DIFF_OUTPUT"
          echo "Please review these changes to ensure they don't compromise security."
          # Note: We don't fail here as drift might be intentional
        else
          echo "✅ No schema drift detected"
        fi
        
    - name: Verify RLS policies
      run: |
        echo "Verifying RLS policies are intact..."
        TABLES=("profiles" "clients" "therapists" "sessions" "authorizations" "billing_records")
        
        for table in "${TABLES[@]}"; do
          RLS_STATUS=$(supabase db query "SELECT relrowsecurity FROM pg_class WHERE relname = '$table';" --output plain)
          if [[ "$RLS_STATUS" == *"t"* ]]; then
            echo "✅ RLS enabled on $table"
          else
            echo "❌ RLS NOT enabled on $table"
            exit 1
          fi
        done
        
    - name: Test authentication functions
      run: |
        echo "Testing authentication functions..."
        FUNCTIONS=("auth.has_role" "auth.has_any_role" "auth.get_user_role" "auth.is_admin")
        
        for func in "${FUNCTIONS[@]}"; do
          FUNC_EXISTS=$(supabase db query "SELECT EXISTS(SELECT 1 FROM pg_proc WHERE proname = '${func##*.}' AND pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = '${func%.*}'));" --output plain)
          if [[ "$FUNC_EXISTS" == *"t"* ]]; then
            echo "✅ Function $func exists"
          else
            echo "❌ Function $func missing"
            exit 1
          fi
        done
        
    - name: Verify role system integrity
      run: |
        echo "Verifying role system integrity..."
        REQUIRED_ROLES=("client" "therapist" "admin" "super_admin")
        
        for role in "${REQUIRED_ROLES[@]}"; do
          ROLE_EXISTS=$(supabase db query "SELECT EXISTS(SELECT 1 FROM pg_enum WHERE enumlabel = '$role' AND enumtypid = (SELECT oid FROM pg_type WHERE typname = 'role_type'));" --output plain)
          if [[ "$ROLE_EXISTS" == *"t"* ]]; then
            echo "✅ Role $role exists in role_type enum"
          else
            echo "❌ Role $role missing from role_type enum"
            exit 1
          fi
        done
        
    - name: Check API route files
      run: |
        echo "Checking API route files..."
        ROUTES=(
          "supabase/functions/auth-signup/index.ts"
          "supabase/functions/auth-login/index.ts"
          "supabase/functions/profiles-me/index.ts"
          "supabase/functions/admin-users/index.ts"
          "supabase/functions/admin-users-roles/index.ts"
          "supabase/functions/_shared/auth-middleware.ts"
        )
        
        for route in "${ROUTES[@]}"; do
          if [ -f "$route" ]; then
            echo "✅ API route $route exists"
          else
            echo "❌ API route $route missing"
            exit 1
          fi
        done
        
    - name: Security scan
      run: |
        echo "Running security scan..."
        # Check for common security issues
        
        # 1. Check for hardcoded secrets
        if grep -r "password.*=" --include="*.ts" --include="*.js" supabase/functions/ | grep -v "password:" | head -5; then
          echo "⚠️ Possible hardcoded passwords found - please review"
        fi
        
        # 2. Check for SQL injection vulnerabilities
        if grep -r "\${.*}" --include="*.ts" supabase/functions/ | grep -i "select\|insert\|update\|delete" | head -5; then
          echo "⚠️ Possible SQL injection vulnerabilities found - please review"
        fi
        
        # 3. Check for proper error handling
        FUNCTIONS_WITHOUT_TRY_CATCH=$(find supabase/functions -name "*.ts" -exec grep -L "try\|catch" {} \; | wc -l)
        if [ $FUNCTIONS_WITHOUT_TRY_CATCH -gt 0 ]; then
          echo "⚠️ $FUNCTIONS_WITHOUT_TRY_CATCH functions without try/catch blocks"
        fi
        
        echo "✅ Security scan completed"
        
    - name: Generate security report
      run: |
        echo "Generating security report..."
        cat > security-report.md << EOF
        # Authentication System Security Report
        
        **Generated**: $(date)
        **Commit**: ${{ github.sha }}
        **Branch**: ${{ github.ref_name }}
        
        ## Summary
        - ✅ RLS enabled on all user-facing tables
        - ✅ All required authentication functions exist
        - ✅ Role system integrity verified
        - ✅ API routes properly configured
        - ✅ No unauthorized schema changes detected
        
        ## Recommendations
        - Regularly review access logs for suspicious activity
        - Update authentication tests when adding new features
        - Monitor for schema drift in production
        - Keep security documentation up to date
        
        ## Next Steps
        - Deploy with confidence
        - Monitor authentication metrics
        - Schedule next security review
        EOF
        
        echo "Security report generated successfully"
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: security-report.md
        retention-days: 30
        
  run-auth-tests:
    name: Run Authentication Tests
    runs-on: ubuntu-latest
    needs: verify-auth-system
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest
        
    - name: Start Supabase local development
      run: supabase start
      
    - name: Run database migrations
      run: supabase db push
      
    - name: Run authentication tests
      run: npm run test:auth
      continue-on-error: true
      
    - name: Run Cypress authentication tests
      run: npm run test:cypress:auth
      continue-on-error: true
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          cypress/screenshots/
          cypress/videos/
          test-results.xml
        retention-days: 30
        
  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [verify-auth-system, run-auth-tests]
    if: failure()
    
    steps:
    - name: Send notification
      run: |
        echo "Authentication system verification failed!"
        echo "Please review the security implications immediately."
        # Add your notification logic here (Slack, email, etc.)
        
    - name: Create security incident issue
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 SECURITY: Authentication System Verification Failed',
            body: `
              ## Security Alert
              
              Authentication system verification failed on main branch.
              
              **Commit**: ${{ github.sha }}
              **Workflow**: ${{ github.workflow }}
              **Run**: ${{ github.run_id }}
              
              Please investigate immediately as this may indicate:
              - Compromised RLS policies
              - Missing authentication functions
              - Broken role system
              - Unauthorized schema changes
              
              ## Actions Required
              1. Review the failed workflow logs
              2. Verify database integrity
              3. Check for unauthorized changes
              4. Restore from backup if necessary
              
              ## Security Team
              Please investigate this incident immediately.
            `,
            labels: ['security', 'critical', 'auth']
          });