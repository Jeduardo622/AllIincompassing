name: CI
on:
  pull_request:
  push:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
      - uses: supabase/setup-cli@v1
        with:
          access-token: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Validate secrets configuration
        run: npm run ci:secrets

      # Always run the SERVICE_ROLE audit
      - run: npm run audit:service-role

      # Typegen/Typecheck only if the repo variable exists; otherwise skip (donâ€™t fail PRs)
      - name: Generate DB types (conditional)
        if: ${{ vars.SUPABASE_PROJECT_ID != '' }}
        run: npm run typegen
        env:
          SUPABASE_PROJECT_ID: ${{ vars.SUPABASE_PROJECT_ID }}
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Run lint
        run: npm run lint

      - name: Run typecheck
        run: npm run typecheck

      - name: Ensure no focused or skipped tests are committed
        run: npm run ci:check-focused

      - name: Run unit tests
        run: vitest run --coverage --run --reporter=verbose --coverage.reporter=json-summary | tee vitest-output.log
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          RUN_DB_IT: '1'

      - name: Verify coverage threshold
        run: npm run ci:verify-coverage

      - name: Ensure RLS tests executed
        if: ${{ always() }}
        run: |
          if grep -q "Skipping RLS policy test - environment not available" vitest-output.log; then
            echo "::error::RLS policy tests were skipped. Ensure Supabase environment variables are configured."
            exit 1
          fi

      - name: Build canary
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: dist

      - name: Preview smoke (deploy preview)
        run: |
          url="${PREVIEW_URL:-${DEPLOY_PRIME_URL:-${URL:-}}}"
          if [ -z "$url" ]; then
            echo "No preview URL available; skipping smoke check."
            exit 0
          fi
          echo "Running preview smoke against $url"
          PREVIEW_URL="$url" npm run preview:smoke

      - name: Skipped typegen (repo var missing)
        if: ${{ vars.SUPABASE_PROJECT_ID == '' }}
        run: echo "SUPABASE_PROJECT_ID repo variable not set; skipping typegen."

  deploy-staging:
    needs: build
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/develop' }}
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.staging_url }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: web-dist
          path: .

      - name: Deploy to Netlify staging
        id: deploy
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}
        run: |
          if [ -z "$NETLIFY_AUTH_TOKEN" ] || [ -z "$NETLIFY_SITE_ID" ]; then
            echo "::error::NETLIFY_AUTH_TOKEN or NETLIFY_STAGING_SITE_ID is not set."
            exit 1
          fi
          npx netlify deploy \
            --dir=dist \
            --site=$NETLIFY_SITE_ID \
            --auth=$NETLIFY_AUTH_TOKEN \
            --context=staging \
            --message "Staging deploy ${GITHUB_SHA}" \
            --json > deploy.json
          node -e "const fs=require('fs');const data=JSON.parse(fs.readFileSync('deploy.json','utf8'));if(!data.deploy_url){throw new Error('Missing deploy_url in Netlify response');}console.log('Staging deploy URL:',data.deploy_url);fs.appendFileSync(process.env.GITHUB_OUTPUT,`staging_url=${data.deploy_url}\n`);"

      - name: Smoke test staging deployment
        env:
          PREVIEW_URL: ${{ steps.deploy.outputs.staging_url }}
        run: |
          if [ -z "$PREVIEW_URL" ]; then
            echo "::error::Missing staging URL output from deploy step."
            exit 1
          fi
          npm run preview:smoke
