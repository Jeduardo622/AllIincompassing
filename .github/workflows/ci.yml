name: CI
on:
  pull_request:
  push:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.16.0
          cache: npm
      - name: Install dependencies
        run: npm ci
      - uses: supabase/setup-cli@v1
        with:
          access-token: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Validate secrets configuration
        run: npm run ci:secrets
        env:
          CI_REQUIRED_SECRET_GROUPS: Supabase,OpenAI,AWS,SMTP,Test JWTs,Netlify Deploy,Clearinghouse Sandbox,Telemetry
          REQUIRE_EXTENDED_SECRETS: '1'

      # Always run the SERVICE_ROLE audit
      - run: npm run audit:service-role

      # Typegen/Typecheck only if the repo variable exists; otherwise skip (donâ€™t fail PRs)
      - name: Generate DB types (conditional)
        if: ${{ vars.SUPABASE_PROJECT_ID != '' }}
        run: npm run typegen
        env:
          SUPABASE_PROJECT_ID: ${{ vars.SUPABASE_PROJECT_ID }}
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Run lint
        run: npm run lint

      - name: Run typecheck
        run: npm run typecheck

      - name: Fail if skipped or focused tests are committed
        run: |
          if git grep -nE '\.(only|skip)\s*\(' -- 'src' 'tests' ':(exclude)tests/utils/testControls.ts'; then
            echo '::error::Focused or skipped tests detected. Use shared helpers instead of .only/.skip.'
            exit 1
          fi
      
      - name: Ensure no focused or skipped tests are committed
        run: npm run ci:check-focused

      - name: Run unit tests
        run: npm run test:ci -- --bail=1 | tee vitest-output.log
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          RUN_DB_IT: '1'

      - name: Verify coverage threshold
        run: npm run ci:verify-coverage

      - name: Upload coverage summary
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-summary
          path: coverage/coverage-summary.json
          if-no-files-found: warn

      - name: Ensure RLS tests executed
        if: ${{ always() }}
        run: |
          if grep -q "Skipping RLS policy test - environment not available" vitest-output.log; then
            echo "::error::RLS policy tests were skipped. Ensure Supabase environment variables are configured."
            exit 1
          fi

      - name: Build canary
        run: npm run build:canary

      - name: Preview smoke (deploy preview)
        env:
          PREVIEW_URL: ${{ env.PREVIEW_URL }}
          DEPLOY_PRIME_URL: ${{ env.DEPLOY_PRIME_URL }}
          URL: ${{ env.URL }}
        run: |
          url="${PREVIEW_URL:-${DEPLOY_PRIME_URL:-${URL:-}}}"
          if [ -z "$url" ]; then
            echo "No preview URL available; skipping smoke check."
            exit 0
          fi
          echo "Running preview smoke against $url"
          PREVIEW_URL="$url" npm run preview:smoke:remote

      - name: Skipped typegen (repo var missing)
        if: ${{ vars.SUPABASE_PROJECT_ID == '' }}
        run: echo "SUPABASE_PROJECT_ID repo variable not set; skipping typegen."

  preview:
    needs: build
    runs-on: ubuntu-latest
    env:
      PREVIEW_HOST: 127.0.0.1
      PREVIEW_PORT: 4173
      PREVIEW_PROTOCOL: http
      PREVIEW_OUTPUT_DIR: out
    outputs:
      preview-url: ${{ steps.publish-preview.outputs.preview_url }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.16.0
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Build preview artifacts
        run: npm run preview:build
      - name: Run preview smoke
        id: run-preview-smoke
        run: |
          set -o pipefail
          npm run preview:smoke | tee preview-smoke.log
      - name: Upload preview smoke log
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: preview-smoke-log
          path: preview-smoke.log
          if-no-files-found: warn
      - name: Run preview smoke (JUnit)
        run: |
          set -o pipefail
          npm run preview:smoke -- --reporter=junit | tee preview-smoke-junit.log
      - name: Upload preview smoke JUnit log
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: preview-smoke-junit-log
          path: preview-smoke-junit.log
          if-no-files-found: warn
      - name: Publish preview URL
        id: publish-preview
        run: |
          host="${PREVIEW_HOST:-127.0.0.1}"
          port="${PREVIEW_PORT:-4173}"
          protocol="${PREVIEW_PROTOCOL:-http}"
          echo "preview_url=${protocol}://${host}:${port}" >> "$GITHUB_OUTPUT"

  deploy-staging:
    needs: [build, preview]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/develop' }}
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.staging_url }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20.16.0

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to Netlify staging
        id: deploy
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}
        run: |
          if [ -z "$NETLIFY_AUTH_TOKEN" ] || [ -z "$NETLIFY_SITE_ID" ]; then
            echo "::error::NETLIFY_AUTH_TOKEN or NETLIFY_STAGING_SITE_ID is not set."
            exit 1
          fi
          npx netlify-cli deploy \
            --dir=dist \
            --site=$NETLIFY_SITE_ID \
            --auth=$NETLIFY_AUTH_TOKEN \
            --context=staging \
            --message "Staging deploy ${GITHUB_SHA}" \
            --json > deploy.json
          node -e "const fs=require('fs');const data=JSON.parse(fs.readFileSync('deploy.json','utf8'));if(!data.deploy_url){throw new Error('Missing deploy_url in Netlify response');}console.log('Staging deploy URL:',data.deploy_url);fs.appendFileSync(process.env.GITHUB_OUTPUT,`staging_url=${data.deploy_url}\n`);"

      - name: Smoke test staging deployment
        env:
          PREVIEW_URL: ${{ steps.deploy.outputs.staging_url }}
        run: |
          if [ -z "$PREVIEW_URL" ]; then
            echo "::error::Missing staging URL output from deploy step."
            exit 1
          fi
          npm run preview:smoke:remote

  audit:
    needs: [build, preview]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.16.0
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Build preview artifacts for regression (see docs/PRODUCTION_READINESS_RUNBOOK.md#cicd-expectations)
        run: npm run preview:build
      - name: Run route audit regression suite
        run: npm run audit:routes
      - name: Upload route audit evidence
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: route-audit-report
          path: reports/evidence/route-audit-report-*.json
          if-no-files-found: warn
      - name: Run Cypress route integrity checks
        run: npm run test:routes
      - name: Upload Cypress artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: cypress-route-artifacts
          path: |
            cypress/videos/**/*.mp4
            cypress/screenshots/**/*.png
          if-no-files-found: warn
