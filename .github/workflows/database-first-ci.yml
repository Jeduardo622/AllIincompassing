name: Database-First CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 0' # Weekly cleanup on Sunday at 2 AM UTC
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

jobs:
  # ============================================================================
  # CI: Test and Validate
  # ============================================================================
  test:
    runs-on: ubuntu-latest
    outputs:
      has-migrations: ${{ steps.check-migrations.outputs.has-migrations }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase local development
        run: supabase db start

      - name: Run tests
        run: npm test

      - name: Check for new migrations
        id: check-migrations
        run: |
          if [[ -n $(find supabase/migrations -name "*.sql" -newer $(git merge-base HEAD origin/main) 2>/dev/null) ]]; then
            echo "has-migrations=true" >> $GITHUB_OUTPUT
          else
            echo "has-migrations=false" >> $GITHUB_OUTPUT
          fi

      - name: Verify generated types are up to date
        run: |
          supabase gen types typescript --local > types.gen.ts
          if ! git diff --ignore-space-at-eol --exit-code --quiet types.gen.ts; then
            echo "Generated types are out of date. Run 'supabase gen types typescript --local > types.gen.ts' and commit the changes."
            git diff
            exit 1
          fi

  # ============================================================================
  # Staging Deployment
  # ============================================================================
  deploy-staging:
    needs: test
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to Supabase project
        run: supabase link --project-ref $SUPABASE_PROJECT_ID

      - name: Run migrations
        run: supabase db push

      - name: Generate and update types
        run: |
          supabase gen types typescript > types.gen.ts
          if ! git diff --exit-code --quiet types.gen.ts; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add types.gen.ts
            git commit -m "Update generated types [skip ci]"
            git push
          fi

      - name: Create deployment comment
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              per_page: 1
            });
            
            const commit = commits[0];
            const comment = `ðŸš€ **Staging Deployment Successful**
            
            **Commit:** ${commit.sha.substring(0, 7)} - ${commit.commit.message}
            **Environment:** Staging
            **Project:** ${process.env.SUPABASE_PROJECT_ID}
            
            âœ… Migrations applied successfully
            âœ… Types generated and updated
            `;
            
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: comment
            });

  # ============================================================================
  # Production Deployment
  # ============================================================================
  deploy-production:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Create backup before deployment
        run: |
          supabase db dump --project-ref $SUPABASE_PROJECT_ID -f backup-$(date +%Y%m%d-%H%M%S).sql
          
      - name: Link to Supabase project
        run: supabase link --project-ref $SUPABASE_PROJECT_ID

      - name: Run migrations
        run: supabase db push

      - name: Generate and update types
        run: |
          supabase gen types typescript > types.gen.ts
          if ! git diff --exit-code --quiet types.gen.ts; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add types.gen.ts
            git commit -m "Update generated types [skip ci]"
            git push
          fi

      - name: Create deployment comment
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              per_page: 1
            });
            
            const commit = commits[0];
            const comment = `ðŸŽ‰ **Production Deployment Successful**
            
            **Commit:** ${commit.sha.substring(0, 7)} - ${commit.commit.message}
            **Environment:** Production
            **Project:** ${process.env.SUPABASE_PROJECT_ID}
            
            âœ… Backup created successfully
            âœ… Migrations applied successfully
            âœ… Types generated and updated
            
            ðŸ”— [View in Supabase Dashboard](https://supabase.com/dashboard/project/${process.env.SUPABASE_PROJECT_ID})
            `;
            
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: comment
            });

  # ============================================================================
  # Weekly Cleanup
  # ============================================================================
  cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Cleanup old backups
        run: |
          # Remove backup files older than 7 days
          find . -name "backup-*.sql" -type f -mtime +7 -delete || true
          
      - name: Cleanup old workflow runs
        uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'database-first-ci.yml',
              per_page: 100
            });
            
            const old_runs = runs.workflow_runs.filter(run => {
              const runDate = new Date(run.created_at);
              const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
              return runDate < weekAgo && run.conclusion !== null;
            });
            
            for (const run of old_runs.slice(0, 10)) {
              try {
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
              } catch (error) {
                console.log(`Failed to delete run ${run.id}: ${error.message}`);
              }
            }