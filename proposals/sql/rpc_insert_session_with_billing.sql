-- Proposal: Create RPC to insert/update session and persist CPT + modifiers in one call
-- Do not apply directly; review RLS implications.

-- Security considerations:
--  - SECURITY DEFINER function with controlled checks
--  - Verifies therapist owns the session (or caller is admin) and org matches caller
--  - Rounds duration to 15-minute increments (CPT compliant)
--  - Inserts into sessions, session_cpt_entries, and session_cpt_modifiers atomically

-- Suggested signature (plpgsql):
-- create or replace function public.insert_session_with_billing(
--   p_session jsonb,               -- { therapist_id, client_id, start_time, end_time, status, notes, location_type, session_type, rate_per_hour }
--   p_cpt_code text,              -- e.g., '97153'
--   p_modifiers text[] default '{}', -- e.g., '{"HN","95"}'
--   p_session_id uuid default null -- optional update path
-- ) returns jsonb
-- language plpgsql
-- security definer
-- set search_path = public
-- as $$
-- declare
--   v_session sessions;
--   v_session_id uuid := p_session_id;
--   v_duration integer;
--   v_cpt_id uuid;
-- begin
--   -- Validate caller access (org + role)
--   if not app.user_has_role_for_org('therapist', null, (p_session->>'therapist_id')::uuid, null, v_session_id) and not app.is_admin() then
--     return jsonb_build_object('success', false, 'error', 'forbidden');
--   end if;
--   -- Compute rounded duration
--   v_duration := greatest(15, round(((nullif(p_session->>'duration_minutes','')::numeric)
--                   nullif + (extract(epoch from ((p_session->>'end_time')::timestamptz - (p_session->>'start_time')::timestamptz)) / 60)) / 15)::int * 15);
--   -- Upsert session
--   if v_session_id is null then
--     insert into sessions (therapist_id, client_id, start_time, end_time, status, notes, location_type, session_type, rate_per_hour, duration_minutes)
--     values ((p_session->>'therapist_id')::uuid, (p_session->>'client_id')::uuid, (p_session->>'start_time')::timestamptz, (p_session->>'end_time')::timestamptz,
--             coalesce(nullif(p_session->>'status',''),'scheduled'), nullif(p_session->>'notes',''), nullif(p_session->>'location_type',''), nullif(p_session->>'session_type',''),
--             nullif(p_session->>'rate_per_hour','')::numeric, v_duration)
--     returning * into v_session;
--     v_session_id := v_session.id;
--   else
--     update sessions set therapist_id=(p_session->>'therapist_id')::uuid, client_id=(p_session->>'client_id')::uuid,
--       start_time=(p_session->>'start_time')::timestamptz, end_time=(p_session->>'end_time')::timestamptz,
--       status=coalesce(nullif(p_session->>'status',''),'scheduled'), notes=nullif(p_session->>'notes',''),
--       location_type=nullif(p_session->>'location_type',''), session_type=nullif(p_session->>'session_type',''),
--       rate_per_hour=nullif(p_session->>'rate_per_hour','')::numeric, duration_minutes=v_duration
--     where id=v_session_id returning * into v_session;
--   end if;
--   -- Resolve CPT code id
--   select id into v_cpt_id from cpt_codes where code = upper(p_cpt_code) and is_active limit 1;
--   if v_cpt_id is null then
--     return jsonb_build_object('success', false, 'error', 'unknown_cpt_code');
--   end if;
--   -- Replace session_cpt_entries
--   delete from session_cpt_entries where session_id = v_session_id;
--   insert into session_cpt_entries (session_id, cpt_code_id, line_number, units, billed_minutes, is_primary)
--   values (v_session_id, v_cpt_id, 1, ceil(v_duration::numeric/15), v_duration, true);
--   -- Insert modifiers (validate against billing_modifiers)
--   insert into session_cpt_modifiers (session_cpt_entry_id, modifier_id, position)
--   select e.id, m.id, row_number() over ()
--   from session_cpt_entries e
--   join billing_modifiers m on m.code = any (select array_agg(upper(x)) from unnest(coalesce(p_modifiers,'{}'::text[])) x)
--   where e.session_id = v_session_id;
--   return jsonb_build_object('success', true, 'session', row_to_json(v_session));
-- end;
-- $$;

-- RLS interaction risk note:
--  - SECURITY DEFINER bypasses caller RLS; ensure strict checks (org + therapist/admin ownership) before mutating.
--  - Alternatively, keep service-role only on server (current approach) and not expose this RPC to clients.


