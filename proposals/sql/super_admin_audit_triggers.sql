-- Proposal: enforce durable audit logging for super-admin impersonation flows
--
-- 1. Create an audit queue table to capture pending impersonation events and retry on failure.
--
--    CREATE TABLE IF NOT EXISTS app.impersonation_audit_queue (
--      id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
--      issued_at timestamptz NOT NULL DEFAULT timezone('utc', now()),
--      actor_id uuid NOT NULL,
--      target_id uuid NOT NULL,
--      target_email text,
--      action text NOT NULL CHECK (action IN ('issue','revoke')),
--      expires_at timestamptz,
--      reason text,
--      retry_count integer NOT NULL DEFAULT 0,
--      last_error text,
--      status text NOT NULL DEFAULT 'pending' CHECK (status IN ('pending','processed','failed'))
--    );
--
--    COMMENT ON TABLE app.impersonation_audit_queue IS
--      'Durable queue ensuring impersonation actions are recorded even if the primary audit insert fails.';
--
-- 2. Attach an AFTER INSERT trigger on the impersonation RPC log table to enqueue when audit insert fails.
--
--    CREATE OR REPLACE FUNCTION app.enqueue_impersonation_audit()
--    RETURNS trigger
--    LANGUAGE plpgsql
--    SECURITY DEFINER
--    SET search_path = public, auth, app
--    AS $$
--    BEGIN
--      INSERT INTO app.impersonation_audit_queue (
--        actor_id,
--        target_id,
--        target_email,
--        action,
--        expires_at,
--        reason
--      ) VALUES (
--        NEW.actor_id,
--        COALESCE(NEW.target_user_id, NEW.target_user_email::uuid),
--        NEW.target_user_email,
--        NEW.action,
--        NEW.expires_at,
--        NEW.reason
--      );
--      RETURN NEW;
--    EXCEPTION WHEN others THEN
--      RAISE WARNING 'Failed to enqueue impersonation audit: %', SQLERRM;
--      RETURN NEW;
--    END;
--    $$;
--
--    CREATE TRIGGER impersonation_audit_queue_trigger
--      AFTER INSERT ON app.impersonation_audit
--      FOR EACH ROW
--      WHEN (NEW.audit_insert_failed IS TRUE)
--      EXECUTE FUNCTION app.enqueue_impersonation_audit();
--
-- 3. Provide a job for retrying failed queue entries and moving them into the main audit table with `status = 'processed'` once successful.
--
--    -- Pseudo-code placeholder for Supabase cron job or external worker.
--    -- The job should re-attempt insert into app.impersonation_audit, increment retry_count,
--    -- and mark entries as failed after N attempts.
